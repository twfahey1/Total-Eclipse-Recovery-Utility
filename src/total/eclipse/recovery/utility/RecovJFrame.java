/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package total.eclipse.recovery.utility;

import java.io.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.nio.file.Files;
import java.nio.file.Paths;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.text.SimpleDateFormat;
import javax.swing.DefaultListModel;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author twfahey1
 */
public class RecovJFrame extends javax.swing.JFrame {
    /**
     * Creates new form RecovJFrame
     */
    public RecovJFrame() {
        initComponents();
    }

    public String GetMyDocuments() {
     JFileChooser fr = new JFileChooser();
     FileSystemView fw = fr.getFileSystemView();
     return fw.getDefaultDirectory().toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dbList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        ubList = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        iniReadList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        userList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                userListMousePressed(evt);
            }
        });
        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(userList);

        jButton1.setText("Recover Dictionary");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        dbList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dbList.setName("dbList"); // NOI18N
        jScrollPane2.setViewportView(dbList);

        ubList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ubList.setName("ubList"); // NOI18N
        jScrollPane3.setViewportView(ubList);

        jButton2.setText("Recover User Settings");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(iniReadList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            System.out.println(Paths.get(masterDBlist.get(dbList.getSelectedIndex())));
            System.out.println(Paths.get(currentSelectedIniDixPath));
            Files.copy(Paths.get(masterDBlist.get(dbList.getSelectedIndex())), Paths.get(currentSelectedIniDixPath), REPLACE_EXISTING);
        }
        catch (Exception e){
            System.out.println(e.toString());
        }
        JOptionPane.showMessageDialog(null, "DB Restore Complete", "DB Restore", JOptionPane.INFORMATION_MESSAGE);
 
    }//GEN-LAST:event_jButton1ActionPerformed

    private String getFileSize(String Filename){
        File file = new File(Filename);
        double bytes = file.length();
        double kilobytes = (bytes / 1024);
        return Objects.toString(round(kilobytes, 0)) + " kb";
        
    }
    
    public static double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }
    
    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
    
    private String getDateModified(String Filename){
        File file = new File(Filename);
        return sdf.format(file.lastModified());
    }
     private List<String> masterUserList = new ArrayList<String>();
         DefaultListModel userLM = new DefaultListModel();
     
    String currentSelectedIniDixPath;
    String currentSelectedIniJobPath;
    String currentIniFilePath;
    String dixName;
    List<String> masterDBlist;
    List<String> masterUBlist;
    
    //On window load, when program first starts, load our data
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        

        listFiles(GetMyDocuments() + "\\Eclipse", ".ini", masterUserList, userList, userLM);      
        //listFiles(System.getenv("SystemDrive") + "\\Eclipse Backups", "db", masterDBlist, dbList, dbLM );
        //listFiles(System.getenv("SystemDrive") + "\\EclipseNT Backups", "db", masterDBlist, dbList, dbLM );
        //listFiles(System.getenv("SystemDrive") + "\\Eclipse Backups", "ub", masterUBlist, ubList, ubLM );
        //listFiles(System.getenv("SystemDrive") + "\\EclipseNT Backups", "ub", masterUBlist, ubList, ubLM );       
        
        
        
    }//GEN-LAST:event_formWindowOpened

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try{
            System.out.println(Paths.get(masterUBlist.get(ubList.getSelectedIndex())));
            System.out.println(Paths.get(currentIniFilePath));
            Files.copy(Paths.get(masterUBlist.get(ubList.getSelectedIndex())), Paths.get(currentIniFilePath), REPLACE_EXISTING);
        }
        catch (Exception e){
            System.out.println(e.toString());
        }
        JOptionPane.showMessageDialog(null, "User Restore Complete", "UB Restore", JOptionPane.INFORMATION_MESSAGE);
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userListValueChanged
        
    }//GEN-LAST:event_userListValueChanged

    private void userListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListMousePressed
        

        masterDBlist = new ArrayList<String>();
        masterUBlist = new ArrayList<String>();
        DefaultListModel dbLM = new DefaultListModel();
        DefaultListModel ubLM = new DefaultListModel();
        currentIniFilePath = masterUserList.get(userList.getSelectedIndex());
        System.out.println("clicked");
        
        String fileSelected = masterUserList.get(userList.getSelectedIndex());
        String userNameBase = FilenameUtils.getBaseName(fileSelected);
        String dictionaryBaseName = "";

        
        List<String> iniSelected = readTXTfile(fileSelected);
        DefaultListModel lm = new DefaultListModel();
        for (String line : iniSelected){
            if (line.startsWith("MainDictionary=")){
                String[] splitLine = line.split("=");
                String dictionaryName = splitLine[splitLine.length-1];
                dixName = splitLine[splitLine.length-1];
                lm.addElement("Main Dictionary = " + dictionaryName);
                dictionaryBaseName = FilenameUtils.getBaseName(dictionaryName);
                
            }
            if (line.contains("=JOB=")){
                String[] splitLine = line.split("=");
                String jobPath = splitLine[splitLine.length-1];
                jobPath = jobPath.replace("{DOC}", GetMyDocuments()+"\\");
                lm.addElement("Job Path = " + jobPath);
                currentSelectedIniJobPath = jobPath;
            
            }
            
            
            currentSelectedIniDixPath = currentSelectedIniJobPath + "\\" + dixName;

            
            //lm.addElement(line);
            //System.out.println(line);
        }
        iniReadList.setModel(lm);
        listFiles(System.getenv("SystemDrive") + "\\Eclipse Backups", dictionaryBaseName+".db", masterDBlist, dbList, dbLM );
        //
        listFiles(System.getenv("SystemDrive") + "\\Eclipse Backups", userNameBase+".ub", masterUBlist, ubList, ubLM );
        listFiles(System.getenv("SystemDrive") + "\\EclipseNT Backups", userNameBase+".ub", masterUBlist, ubList, ubLM );  
        listFiles(System.getenv("SystemDrive") + "\\EclipseNT Backups", "db", masterDBlist, dbList, dbLM );
        
    }//GEN-LAST:event_userListMousePressed

    //Can return a list of all the lines in a text, useful for parsing
    //ini file to get values
    private List<String> readTXTfile(String fileName){
        List<String>fileData = new ArrayList<String>();
        String line = null;
        
        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = 
                new FileReader(fileName);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
                fileData.add(line);
            }   

            // Always close files.
            bufferedReader.close();         
        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                fileName + "'");                
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + fileName + "'");                  
            // Or we could just do this: 
            // ex.printStackTrace();
        }
        return fileData;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecovJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecovJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecovJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecovJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecovJFrame().setVisible(true);

            }
        });
    }

    public void listFiles(String folder, String ext, List<String> masterList, JList listToAddTo, DefaultListModel bkLM) {
        List<String> resultList = new ArrayList<String>();
        FileFilter filter = new WildcardFileFilter("*"+ext+"*");
        File dir = new File(folder);

        if(dir.isDirectory()==false){
                resultList.add("Directory does not exists : " + folder);

        }
        // list out all the file name and filter by the extension
        File[] list = dir.listFiles(filter);

        if (list.length == 0) {
                resultList.add("no files end with : " + ext);
        }

        for (File file : list) {
                /*This gets the whole file name path: */ 
                String temp = new StringBuffer(folder).append(File.separator)
                                .append(file).toString();
                
                String filePath = file.getAbsolutePath();
                String basename = FilenameUtils.getBaseName(filePath);
                String nameWextension = FilenameUtils.getName(filePath);
                resultList.add(nameWextension + " - " + getFileSize(filePath) + " - " + getDateModified(filePath));
                masterList.add(filePath);
        }

        for (String bkFile : resultList){
            bkLM.addElement(bkFile);
        }
        
        listToAddTo.setModel(bkLM);
    }       

    // inner class, generic extension filter
    public class GenericExtFilter implements FilenameFilter {

            private String ext;

            public GenericExtFilter(String ext) {
                    this.ext = ext;
            }

            public boolean accept(File dir, String name) {
                    return (name.endsWith(ext));
            }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> dbList;
    private javax.swing.JList<String> iniReadList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> ubList;
    private javax.swing.JList<String> userList;
    // End of variables declaration//GEN-END:variables
}
